schema marqo__my_00index {
document {
field marqo__id type string {
indexing: attribute | summary
attribute: fast-search
rank: filter
}
field marqo__lexical_title type string {
indexing: index | summary
index: enable-bm25
}
field description type string {
indexing: summary
}
field price type float {
indexing: summary
}
field marqo__chunks_title type array<string> {
indexing: attribute | summary
}
field marqo__embeddings_title type tensor<float>(p{}, x[512]) {
indexing: attribute | index | summary
attribute { distance-metric: prenormalized-angular }
index { hnsw {
max-links-per-node: 16
neighbors-to-explore-at-insert: 100
}}
}
field marqo__chunks_description type array<string> {
indexing: attribute | summary
}
field marqo__embeddings_description type tensor<float>(p{}, x[512]) {
indexing: attribute | index | summary
attribute { distance-metric: prenormalized-angular }
index { hnsw {
max-links-per-node: 16
neighbors-to-explore-at-insert: 100
}}
}
field marqo__vector_count type int { indexing: attribute | summary }
}
rank-profile base_rank_profile inherits default {
inputs {
query(marqo__lexical_title): 0
query(marqo__embeddings_title): 0
query(marqo__embeddings_description): 0
query(marqo__query_embedding) tensor<float>(x[512])
query(marqo__bm25_aggregator): 0
query(marqo__mult_weights_lexical) tensor<double>(p{})
query(marqo__add_weights_lexical) tensor<double>(p{})
query(marqo__mult_weights_tensor) tensor<double>(p{})
query(marqo__add_weights_tensor) tensor<double>(p{})
}
function modify(score, mult_weights, add_weights) {
   expression: score
}
function lexical_score_sum() {
expression: if (query(marqo__lexical_title) > 0, bm25(marqo__lexical_title), 0)
}
function lexical_score_avg() {
expression: (if (query(marqo__lexical_title) > 0, bm25(marqo__lexical_title), 0)) / max(1, if (query(marqo__lexical_title) > 0, 1, 0))
}
function lexical_score_max() {
expression: if(query(marqo__lexical_title) > 0, bm25(marqo__lexical_title), 0)
}
function lexical_score() {
expression: if (query(marqo__bm25_aggregator) == 0, lexical_score_sum(), if (query(marqo__bm25_aggregator) == 1, lexical_score_avg(), lexical_score_max()))
}
function embedding_score() {
expression: max(if(query(marqo__embeddings_title) > 0, closeness(field, marqo__embeddings_title), 0), if(query(marqo__embeddings_description) > 0, closeness(field, marqo__embeddings_description), 0))
}
}
rank-profile bm25 inherits base_rank_profile {
first-phase {
expression: modify(lexical_score(), query(marqo__mult_weights_lexical), query(marqo__add_weights_lexical))
}}
rank-profile embedding_similarity inherits base_rank_profile {
first-phase {
expression: modify(embedding_score(), query(marqo__mult_weights_tensor), query(marqo__add_weights_tensor))
}
match-features: closest(marqo__embeddings_title) closest(marqo__embeddings_description) distance(field, marqo__embeddings_title) distance(field, marqo__embeddings_description)
}
rank-profile hybrid_custom_searcher inherits default {
inputs {
query(marqo__query_embedding) tensor<float>(x[512])
query(marqo__fields_to_rank_lexical) tensor<int8>(p{})
query(marqo__fields_to_rank_tensor) tensor<int8>(p{})
query(marqo__mult_weights_lexical) tensor<double>(p{})
query(marqo__add_weights_lexical) tensor<double>(p{})
query(marqo__mult_weights_tensor) tensor<double>(p{})
query(marqo__add_weights_tensor) tensor<double>(p{})
}
}
rank-profile hybrid_bm25_then_embedding_similarity inherits base_rank_profile {
first-phase {
expression: modify(lexical_score(), query(marqo__mult_weights_lexical), query(marqo__add_weights_lexical))
}
second-phase {
expression: modify(embedding_score(), query(marqo__mult_weights_tensor), query(marqo__add_weights_tensor))
}
match-features: closest(marqo__embeddings_title) closest(marqo__embeddings_description) distance(field, marqo__embeddings_title) distance(field, marqo__embeddings_description)
}
rank-profile hybrid_embedding_similarity_then_bm25 inherits base_rank_profile {
first-phase {
expression: modify(lexical_score(), query(marqo__mult_weights_lexical), query(marqo__add_weights_lexical))
}}
fieldset default {
fields: marqo__lexical_title
}
document-summary all-non-vector-summary {
summary marqo__id type string { }
summary title type string { source: marqo__lexical_title }
summary description type string { source: description }
summary price type float { source: price }
summary marqo__chunks_title type array<string> { }
summary marqo__chunks_description type array<string> { }
}
document-summary all-vector-summary {
summary marqo__id type string { }
summary title type string { source: marqo__lexical_title }
summary description type string { source: description }
summary price type float { source: price }
summary marqo__chunks_title type array<string> { }
summary marqo__chunks_description type array<string> { }
summary marqo__embeddings_title type tensor<float>(p{}, x[512]) { }
summary marqo__embeddings_description type tensor<float>(p{}, x[512]) { }
}
}