import unittest
from unittest import mock

import numpy as np

from marqo.core.inference.embedding_models.hugging_face_model import HuggingFaceModel
from marqo.core.inference.embedding_models.hugging_face_model_properties import PoolingMethod, HuggingFaceModelFlags, \
  HuggingFaceTokenizerFlags
from marqo.s2_inference.errors import InvalidModelPropertiesError


class TestHuggingFaceModel(unittest.TestCase):
    """Test initializing the HuggingFaceModel with valid properties."""

    E5_BASE_V2_MODEL_EMBEDDINGS = np.squeeze(
        np.array(
            [[-1.53993233e-03, -4.38184328e-02, -7.15491399e-02,
              -2.21859273e-02, 4.31589559e-02, -3.24265547e-02,
              5.12144640e-02, 2.80460659e-02, -5.22950180e-02,
              3.33100627e-03, 2.68442389e-02, 6.07045442e-02,
              -3.73158492e-02, -3.92404646e-02, -5.23854904e-02,
              6.08786643e-02, 3.59617919e-02, -9.29735659e-04,
              5.42329103e-02, 3.23522440e-03, -4.17569168e-02,
              -8.93813092e-03, 5.63500077e-02, -4.33811126e-03,
              1.49898147e-02, -6.72923215e-03, -1.24906814e-02,
              4.00044471e-02, -1.34475715e-02, -4.94214892e-02,
              4.12338413e-03, 1.44163240e-02, 2.67091561e-02,
              -2.94547062e-02, -8.89921933e-03, 3.08779106e-02,
              -2.23634876e-02, -3.13180871e-02, -2.51241550e-02,
              -1.18573848e-02, -6.21171817e-02, -4.05875742e-02,
              -3.85968015e-02, 4.63903360e-02, -2.54101362e-02,
              -8.48237984e-03, -9.64764564e-04, 4.94192503e-02,
              -2.70866305e-02, -5.71681075e-02, -5.17644547e-02,
              1.92878135e-02, 5.64169362e-02, -1.24792038e-02,
              -1.77764595e-02, 2.07304321e-02, -3.91926942e-03,
              -3.22796144e-02, -6.38422742e-02, -2.54739840e-02,
              5.17578870e-02, -4.11305763e-03, 2.12824978e-02,
              -8.28473177e-03, 4.98436298e-03, 4.76504155e-02,
              4.60972171e-03, 3.73470760e-03, -4.46945950e-02,
              1.06849857e-05, -5.31281054e-04, -7.42445840e-03,
              -2.32021697e-02, -2.89897551e-03, -1.08536454e-02,
              -3.90633047e-02, 1.87121518e-02, 6.75488869e-03,
              6.21497333e-02, 2.02559773e-02, 3.51797265e-04,
              -3.93331647e-02, -4.08418151e-03, 2.20038239e-02,
              4.43556532e-02, -1.62268840e-02, -3.05120852e-02,
              4.14704792e-02, -5.14927916e-02, 3.18746492e-02,
              -8.48620199e-03, -2.79160067e-02, 1.55973714e-02,
              3.37110385e-02, 6.33243546e-02, -5.04625663e-02,
              3.52013223e-02, -5.30491918e-02, 2.25692615e-02,
              1.95694971e-03, -4.37596589e-02, -1.65351946e-02,
              -3.28059606e-02, -1.26289725e-02, -8.01686794e-02,
              -4.44752611e-02, -1.15274042e-02, -1.74678266e-02,
              -5.21782273e-03, 3.62658985e-02, -5.66074327e-02,
              -1.00420807e-02, -4.82268445e-02, 5.96063863e-03,
              -6.50647506e-02, 3.95454317e-02, 6.53651506e-02,
              -1.19691398e-02, -3.21850181e-02, -3.63157801e-02,
              -1.39682181e-02, 3.56259942e-02, 5.23050800e-02,
              6.30052239e-02, 4.96584177e-03, 3.19971107e-02,
              4.80453372e-02, 1.08391950e-02, -1.44911148e-02,
              -1.36337653e-02, 2.39572469e-02, -1.68092083e-02,
              1.59984883e-02, -4.50005308e-02, -3.41027230e-02,
              -4.23994437e-02, -3.41491848e-02, -1.11522516e-02,
              3.91584784e-02, -8.63064826e-03, 1.62917341e-03,
              4.72876392e-02, 4.34379354e-02, -1.60112102e-02,
              2.45747343e-02, -2.62808930e-02, -1.30942417e-02,
              -2.46385578e-02, -5.69089167e-02, 4.34393138e-02,
              2.81369295e-02, 9.39730462e-03, 3.66095454e-02,
              -3.57634388e-02, -5.15757166e-02, 4.36473340e-02,
              3.33106704e-02, -2.30557956e-02, -4.34662476e-02,
              8.22917186e-03, 3.23445201e-02, 3.20423469e-02,
              2.58185733e-02, 2.08669100e-02, -3.71028371e-02,
              2.59646680e-02, 3.17775458e-02, -2.79521737e-02,
              2.55317445e-05, 5.36171831e-02, -3.58999632e-02,
              -2.48517226e-02, 1.96478218e-02, 1.94271689e-03,
              -6.67033643e-02, 5.15624769e-02, 4.95204877e-04,
              2.60936953e-02, -3.17780972e-02, -3.39414505e-03,
              -4.86411117e-02, 4.45222147e-02, 3.85296158e-02,
              4.56899665e-02, -4.49299552e-02, -4.69735861e-02,
              4.79343496e-02, -5.89369908e-02, 2.69743279e-02,
              6.08315691e-02, -3.96981724e-02, -2.92713158e-02,
              5.85827008e-02, -6.83050777e-04, 5.50356284e-02,
              -4.94767725e-02, -3.13899517e-02, 8.52199346e-02,
              3.29716615e-02, -3.87356529e-04, 5.57458587e-03,
              1.49246072e-02, 3.67202647e-02, -6.45631030e-02,
              -8.62391070e-02, -1.58972517e-02, 3.65059227e-02,
              -4.72036079e-02, 9.78113618e-03, 2.86919046e-02,
              -3.40395235e-02, -2.46855095e-02, 2.03215890e-02,
              -3.74348611e-02, 1.24361822e-02, -4.23930883e-02,
              3.13656889e-02, -1.30750448e-03, 5.46741672e-02,
              5.89324208e-03, 8.45710263e-02, -1.76011398e-02,
              -3.36720943e-02, 3.13056707e-02, -1.87502224e-02,
              -3.24332475e-04, 5.20042256e-02, 1.08312247e-02,
              -1.47905340e-02, 3.15025076e-03, -3.16224396e-02,
              -2.01831735e-03, 1.08164884e-02, 3.10172942e-02,
              -2.63415687e-02, 2.20957715e-02, -1.59405936e-02,
              4.79880441e-03, 5.59855364e-02, -4.64766026e-02,
              1.07115433e-02, 7.22416118e-02, -2.35065930e-02,
              2.94936337e-02, -4.69267145e-02, -3.17620188e-02,
              3.14577185e-02, -3.31599042e-02, -3.91567498e-02,
              -1.33554246e-02, -2.21432131e-02, 5.64046856e-03,
              4.62996401e-02, 5.16851107e-03, 6.71406509e-03,
              -9.82102230e-02, -1.54658882e-02, 5.52075319e-02,
              6.54641762e-02, 1.92561112e-02, 2.99217459e-02,
              1.90807525e-02, -8.32299981e-03, -2.37437077e-02,
              -5.67882136e-03, -6.17451333e-02, -5.73352724e-02,
              -7.64597356e-02, 7.11698905e-02, 6.08729795e-02,
              4.20871787e-02, 7.80280381e-02, -1.38695640e-02,
              2.03670412e-02, 2.32333187e-02, -6.84289709e-02,
              5.50778769e-02, -1.06860213e-02, -2.63890754e-02,
              -2.26620920e-02, -1.10853920e-02, 5.87578416e-02,
              -1.37342932e-02, -3.72807235e-02, 1.94568485e-02,
              -7.96313360e-02, 4.59807143e-02, -3.62987965e-02,
              -2.85756756e-02, -3.30580287e-02, -4.58282745e-03,
              6.33826479e-02, -5.16325980e-02, -2.22003944e-02,
              3.94202694e-02, -8.25583562e-03, 5.13864309e-03,
              3.82165238e-02, 4.69028950e-02, 4.53159325e-02,
              2.17314996e-02, 4.04652283e-02, 3.39442194e-02,
              3.58035490e-02, 1.55868707e-02, -6.86571822e-02,
              4.35505472e-02, -5.98884411e-02, -1.31844394e-02,
              9.69593599e-03, -5.54979593e-02, -3.48618627e-02,
              4.45805937e-02, -1.66676361e-02, 9.73566715e-03,
              -3.78498295e-03, -3.05469669e-02, -3.16619277e-02,
              -4.89909016e-02, -3.14661451e-02, 4.82626166e-03,
              1.41253583e-02, 1.96540579e-02, -2.15874482e-02,
              3.00536547e-02, -3.25051770e-02, -4.23656926e-02,
              5.14955036e-02, -3.49177630e-03, -1.62759423e-02,
              -3.87035273e-02, 5.41068800e-02, -3.57351862e-02,
              4.66594845e-02, -3.40629183e-02, -3.08876690e-02,
              -3.69671360e-02, -2.27069724e-02, -2.11486574e-02,
              1.03544667e-02, 4.63655125e-03, 1.83732305e-02,
              6.68170825e-02, -4.01819386e-02, 2.52030566e-02,
              -4.80497144e-02, 1.00672785e-02, -1.43906819e-02,
              -6.41445965e-02, 1.51935192e-02, -1.53031796e-02,
              4.90951259e-03, 2.71559451e-02, -8.51686392e-03,
              4.60648024e-03, -4.97527942e-02, 2.24174364e-04,
              2.68735271e-02, 1.35805942e-02, -2.47550961e-02,
              3.62117141e-02, -1.67884422e-03, -2.91256625e-02,
              -2.29127817e-02, 4.16702218e-02, 4.62259650e-02,
              2.75031398e-05, -3.58557850e-02, 3.61657739e-02,
              -1.47870332e-02, -6.74858829e-03, -3.82761993e-02,
              -5.95595874e-02, -2.89052296e-02, -3.25021707e-02,
              6.24917913e-03, 3.01534459e-02, 5.06045595e-02,
              -4.44340967e-02, 4.34991671e-03, -4.94660325e-02,
              -1.62318677e-01, -5.81121407e-02, -2.72427686e-02,
              -3.14156264e-02, 3.18332091e-02, 6.30181795e-03,
              2.35881936e-02, -1.83542576e-02, -3.45146214e-03,
              -2.69651460e-03, 3.45528312e-02, -1.35122845e-02,
              -8.52363035e-02, 1.05168181e-03, -1.97159662e-03,
              -3.05432416e-02, -7.14082690e-03, 1.25974445e-02,
              -7.96545893e-02, -2.02763285e-02, 2.05951408e-02,
              7.20165521e-02, 7.01677129e-02, -4.30359505e-03,
              1.86908189e-02, 5.76274358e-02, -5.46180867e-02,
              3.71913686e-02, -2.98889522e-02, -2.24336684e-02,
              -4.78838272e-02, 5.01907766e-02, -2.28472846e-03,
              -2.29000486e-02, 1.54428110e-02, 4.81073968e-02,
              -2.82442104e-03, 4.50737402e-02, -4.12207693e-02,
              1.11912638e-02, -4.89227995e-02, 2.87061520e-02,
              -1.51606118e-02, 6.65191328e-03, 1.81607958e-02,
              -9.65218898e-03, 2.04727817e-02, -3.04027107e-02,
              4.03397642e-02, -1.99636258e-02, -6.68246448e-02,
              -1.86916068e-02, 1.98589023e-02, 2.29181312e-02,
              -4.96531166e-02, 1.53880240e-03, -1.33979262e-03,
              -4.27836254e-02, -5.04723825e-02, 3.58899459e-02,
              3.21483538e-02, 3.07801440e-02, 7.06098154e-02,
              -2.05557700e-02, -9.60775092e-03, -5.12775965e-02,
              -4.27475795e-02, -1.66314114e-02, 1.22427968e-02,
              3.94281605e-03, 1.62784848e-02, 2.04217043e-02,
              2.78562270e-02, -4.04961966e-02, 3.53613868e-02,
              -2.28397883e-02, 4.94474396e-02, 1.47242341e-02,
              -2.89180707e-02, 6.27992824e-02, 2.52445675e-02,
              -1.72485840e-02, -4.16123830e-02, 9.81981158e-02,
              3.31860897e-03, -1.60940047e-02, -7.29231685e-02,
              -1.17015755e-02, -9.40752402e-02, -2.52000429e-02,
              4.16504731e-03, -6.58993004e-03, 5.73325679e-02,
              2.39223801e-02, -5.71232615e-03, -6.72712401e-02,
              -2.43610200e-02, 1.98861603e-02, -5.23395464e-02,
              -1.17257414e-02, 6.62670881e-02, -3.79348435e-02,
              1.73155870e-02, -3.04324180e-03, -2.20575500e-02,
              3.43058147e-02, 1.55564845e-02, 4.58828881e-02,
              -6.83468506e-02, -4.52903239e-03, 8.61544535e-03,
              -1.74299181e-02, -8.65335297e-03, -2.12285891e-02,
              -3.06075271e-02, -3.17619145e-02, 3.53866704e-02,
              1.27371750e-03, 5.52219385e-03, 3.67731676e-02,
              2.09426526e-02, -2.62479857e-02, -2.22966745e-02,
              -9.86706000e-04, 7.63195753e-02, -1.13831637e-02,
              3.12389657e-02, -1.79441329e-02, 4.22073901e-03,
              -6.24284297e-02, 3.41456495e-02, 4.74380851e-02,
              -2.53395233e-02, 2.22158246e-02, 1.08980725e-03,
              -1.82700586e-02, 2.74093281e-02, -2.36395374e-02,
              5.66534977e-03, 2.46165581e-02, 5.74524589e-02,
              -4.45447350e-03, -1.56035209e-02, 2.65500657e-02,
              4.80396971e-02, 1.63284913e-02, 2.53283582e-03,
              -4.98772711e-02, -4.64920104e-02, -5.13953380e-02,
              -5.77078480e-03, -3.59517522e-02, 1.74799003e-02,
              3.76863219e-02, -4.01153788e-02, 2.98959203e-02,
              -4.39188927e-02, 5.65573499e-02, -1.20074246e-02,
              -1.69790108e-02, 1.95173267e-02, 3.85093093e-02,
              -1.05365198e-02, -1.74229331e-02, -8.94283317e-03,
              -2.11154986e-02, 3.77129540e-02, 6.34477809e-02,
              3.42995971e-02, -2.16718446e-02, 1.37758628e-02,
              -4.87477109e-02, 2.48271711e-02, 2.39046700e-02,
              -6.03786996e-03, -2.49127485e-02, -5.87582542e-03,
              -4.45803702e-02, -1.07264286e-02, -2.49500480e-02,
              -3.53427939e-02, 4.35795030e-03, -1.51483789e-02,
              -6.36755228e-02, 2.06587408e-02, -1.48379998e-02,
              -3.42692211e-02, -1.13392146e-02, 5.62237501e-02,
              -3.89885232e-02, 6.20278455e-02, 3.66568305e-02,
              5.08336350e-02, -2.55245101e-02, -3.97595577e-02,
              4.05675210e-02, 2.09310409e-02, 8.26423708e-03,
              -2.16889735e-02, -5.45453979e-03, 2.87272036e-02,
              5.04308604e-02, 5.31062707e-02, -2.90425196e-02,
              -1.76872686e-02, 2.49194205e-02, -1.84365325e-02,
              -5.73580968e-04, 4.22914885e-02, -1.19949831e-02,
              3.33814882e-02, 4.23363112e-02, -4.29901294e-02,
              1.50336856e-02, 1.74857455e-03, -4.49241288e-02,
              4.04228866e-02, 5.29668331e-02, 6.81887865e-02,
              3.92002100e-03, -3.30047831e-02, 2.68607531e-02,
              6.87942058e-02, 3.75969671e-02, 2.56715063e-02,
              -5.02616949e-02, 4.36541019e-03, -7.20635355e-02,
              7.42193758e-02, 4.05292623e-02, 7.43994582e-03,
              -4.85715568e-02, -3.33363598e-04, -9.24233405e-04,
              -1.49145974e-02, 1.86247304e-02, -1.23054506e-02,
              -2.57431697e-02, -2.05192547e-02, 4.31957170e-02,
              2.54208185e-02, -3.06499861e-02, -3.40308212e-02,
              8.68191011e-03, -7.16370856e-03, -6.01101201e-03,
              7.03491867e-02, 3.72186638e-02, -2.86593996e-02,
              4.56372797e-02, 6.12319931e-02, 1.89859923e-02,
              6.28441647e-02, -1.55821620e-02, 4.43504341e-02,
              -2.79502245e-03, 6.15532771e-02, 1.03703458e-02,
              6.30988181e-02, 4.24089432e-02, 5.60553819e-02,
              -1.39394104e-02, -3.19706090e-02, 3.71167026e-02,
              -2.00144369e-02, -9.74838622e-03, 4.47796062e-02,
              -3.47584486e-02, 7.13985115e-02, 2.47936659e-02,
              4.66571152e-02, 2.12951954e-02, 1.95531342e-02,
              7.93775823e-03, -5.79514764e-02, 1.79772731e-02,
              2.58140964e-03, 1.30382339e-02, -3.12318821e-02,
              -3.14340517e-02, -1.86547413e-02, 2.50276290e-02,
              3.48293111e-02, -5.20406663e-03, -2.89757121e-02,
              -2.90802168e-03, -1.11093326e-02, -2.97714528e-02,
              -3.21674049e-02, 5.21572642e-02, 1.49144502e-02,
              -2.22427752e-02, -3.45289409e-02, -8.56250431e-03,
              -6.27698228e-02, 6.80940272e-03, 1.15727470e-03,
              1.00673260e-02, 7.61638070e-03, -3.06326188e-02,
              4.00051959e-02, 3.10907662e-02, 3.89613993e-02,
              3.36998031e-02, -3.28814164e-02, -4.71040839e-03,
              1.73051730e-02, 8.86960514e-03, -5.23704998e-02,
              -3.12850885e-02, -3.08352690e-02, 3.86217725e-03,
              4.03188448e-03, -6.13248069e-03, 9.04717483e-03,
              -1.77066773e-02, -2.05547065e-02, -4.37792437e-03,
              2.09461357e-02, -1.96832046e-03, -2.68010679e-03,
              -5.08974157e-02, -8.00034683e-03, 4.26372625e-02,
              -1.54677946e-02, 2.12462787e-02, 8.59516207e-03,
              1.05093252e-02, 1.74335949e-02, -5.26627414e-02,
              3.36601846e-02, -8.35399143e-03, 4.38855886e-02,
              -2.45736260e-02, 3.73706035e-02, -6.81321993e-02,
              1.68453902e-02, 4.50808182e-02, -4.56484444e-02,
              -3.48260552e-02, 2.13449933e-02, 4.59566014e-03,
              3.47219482e-02, 4.49425466e-02, 1.09793097e-02,
              2.24647503e-02, -4.97041978e-02, -3.07102297e-02,
              -4.94886376e-02, 6.06917031e-03, 2.89279800e-02,
              8.69093370e-03, 5.67235015e-02, 2.99701951e-02,
              1.48614319e-02, -1.45340730e-02, 1.34937400e-02,
              -6.98988214e-02, 2.65878160e-02, -1.64858997e-02,
              2.86024082e-02, 2.82326005e-02, -1.00837750e-02,
              1.11203119e-02, 2.20332444e-02, -2.04786845e-02,
              -5.71124479e-02, 6.35670125e-02, 5.17619029e-02,
              4.89608981e-02, 1.45385480e-02, 1.65739506e-02,
              -2.54417695e-02, -3.58065143e-02, -5.06120026e-02,
              -5.46549708e-02, 3.59449573e-02, 5.59705077e-04,
              -2.30380464e-02, 1.52595676e-02, -6.69343099e-02,
              4.55643842e-03, 2.28525754e-02, -3.72355767e-02,
              -2.70220302e-02, -1.16989273e-03, 5.52339405e-02]]
        )
    )

    NLI_BERT_BASE_CLS_MODEL_EMBEDDINGS = np.squeeze(
        np.array(
            [[-1.38045363e-02, -1.26324790e-02, 2.80067362e-02,
              -3.94332707e-02, 4.21525203e-02, 3.48563381e-02,
              4.26499359e-02, 1.80672705e-02, -2.30675992e-02,
              -2.59304401e-02, -5.94409034e-02, 3.59071419e-02,
              -5.27208410e-02, -2.69699586e-03, 6.43493012e-02,
              -4.28358791e-03, 1.59534626e-02, 1.25811659e-02,
              5.53512163e-02, -4.69161868e-02, -8.22236855e-03,
              6.39215484e-02, 7.60666840e-03, -5.44207245e-02,
              1.50170950e-02, -5.27593717e-02, 3.40173021e-03,
              -2.46120291e-03, -1.74842868e-02, 3.20513360e-02,
              5.35435043e-03, -2.40322035e-02, -1.82513501e-02,
              -8.44017789e-03, -2.77171433e-02, -5.15357554e-02,
              3.15882415e-02, -1.95944067e-02, -1.86955947e-02,
              3.43169289e-04, -1.48254391e-02, -2.55950205e-02,
              5.79135157e-02, -1.33917453e-02, -7.02805445e-02,
              1.34170298e-02, -1.35798544e-01, 2.25282833e-02,
              -2.62668189e-02, 3.36957946e-02, -8.78745243e-02,
              8.17008503e-03, 6.72491863e-02, 2.84580011e-02,
              -5.39750746e-03, 1.38973808e-02, 2.37578265e-02,
              -4.52367291e-02, 5.53393271e-03, -4.76923352e-03,
              6.64933259e-03, 8.94959923e-03, 4.96707968e-02,
              2.28353385e-02, -1.58383921e-02, 6.58403337e-03,
              2.70136036e-02, -5.15306182e-02, -6.82405382e-02,
              5.82373664e-02, 1.42340157e-02, 1.39634556e-03,
              -3.55863161e-02, 3.25084701e-02, -4.85322587e-02,
              -1.56914983e-02, 1.68089801e-03, 3.16784494e-02,
              4.48221480e-03, 4.57881540e-02, -2.11009867e-02,
              4.71254475e-02, 4.13249061e-02, -1.61566655e-03,
              -2.38496773e-02, 1.46785351e-02, 1.81302503e-02,
              8.77589278e-04, -7.54943639e-02, 2.95870844e-02,
              -2.37905979e-02, -2.77383458e-02, -2.33660303e-02,
              -4.31852229e-02, 6.75797686e-02, 1.19550042e-02,
              -3.73258702e-02, 2.40408592e-02, -1.30674234e-02,
              -1.03089539e-02, -2.56236456e-02, -6.41170144e-02,
              2.31279228e-02, -2.96398420e-02, -4.35341410e-02,
              -1.18608596e-02, -2.42918935e-02, -3.52341197e-02,
              -5.19590154e-02, 4.08839658e-02, 2.44715507e-03,
              -1.98010430e-02, 5.92447147e-02, 3.20643606e-03,
              -5.56434095e-02, 3.74478698e-02, -7.77755231e-02,
              3.77231874e-02, -1.41348215e-02, 6.48891106e-02,
              -5.50682582e-02, 2.84178909e-02, 3.42046027e-03,
              1.45685999e-02, 2.42748708e-02, -3.39308381e-02,
              4.16903831e-02, 4.44773957e-02, -6.30539060e-02,
              -1.38155529e-02, 3.27304937e-03, 2.75869332e-02,
              5.27329668e-02, 4.17043827e-02, -2.46828366e-02,
              -3.69426375e-03, 1.51281999e-02, -3.29721496e-02,
              -7.93246180e-03, 1.81145314e-02, -5.84085770e-02,
              2.84974873e-02, 4.05289466e-03, -3.91773991e-02,
              1.53927822e-02, -4.75471616e-02, -5.15790954e-02,
              9.12845228e-03, -4.31800857e-02, 1.62325744e-02,
              -1.71076115e-02, 4.15174216e-02, -2.62871403e-02,
              -3.06025948e-02, -2.64176708e-02, 6.29329914e-03,
              1.87084787e-02, 7.40983188e-02, -2.53543872e-02,
              -8.93931463e-03, 1.16059789e-02, 5.62588349e-02,
              5.19875400e-02, 3.65024339e-03, 3.44109870e-02,
              1.73520651e-02, -1.15880580e-03, -4.31972072e-02,
              9.08681192e-03, 4.49779816e-02, 6.06826730e-02,
              -5.23631461e-02, -5.85136120e-04, -1.44744078e-02,
              -5.34051880e-02, -1.59004834e-02, 1.60060935e-02,
              3.74302492e-02, 9.25461203e-02, -4.45132963e-02,
              -2.15530302e-02, 2.05617808e-02, 3.41037177e-02,
              -9.27085131e-02, -8.03314429e-03, -3.73223796e-03,
              2.52851117e-02, -1.02553274e-02, 5.83608486e-02,
              -1.72788016e-02, 3.81971076e-02, -3.41951326e-02,
              3.93162407e-02, -9.14255306e-02, 3.26433294e-02,
              1.72617696e-02, -4.48362045e-02, 4.00994495e-02,
              1.64799090e-03, 1.43023990e-02, 8.80771354e-02,
              -5.11318631e-02, 4.16282192e-02, -6.33208547e-03,
              3.51006500e-02, 7.66049996e-02, -5.60878254e-02,
              5.18849306e-02, -2.00003828e-03, -2.78270487e-02,
              -5.05064949e-02, 8.39368328e-02, 4.19133939e-02,
              9.04264767e-03, 2.95757875e-02, -2.20852010e-02,
              2.31264196e-02, -3.02072503e-02, 1.18131898e-02,
              -1.17451865e-02, 2.35333778e-02, 8.67451169e-03,
              3.97997834e-02, 2.68101301e-02, -5.67641407e-02,
              -7.33581744e-03, 5.17354868e-02, -1.05423471e-02,
              1.09437697e-01, 1.03249047e-02, 1.95929557e-02,
              4.91198944e-03, 1.84405819e-02, 3.48240584e-02,
              1.12121813e-02, 1.16120065e-02, -8.48978758e-03,
              1.58214830e-02, 1.13368491e-02, 2.51315478e-02,
              4.78463061e-02, 9.14337561e-02, -1.31221702e-02,
              -2.13437993e-02, -6.32071048e-02, -2.44918615e-02,
              7.14293048e-02, 2.39957846e-03, 4.01073339e-04,
              2.99567711e-02, 1.17132324e-04, -4.24298830e-02,
              -1.35866962e-02, -4.60037589e-02, -6.45992346e-03,
              3.59253511e-02, -3.89481150e-02, -1.45485904e-03,
              4.22752798e-02, 1.39497104e-03, -2.88896449e-02,
              -1.02068596e-02, -6.60405606e-02, 1.40659837e-02,
              -6.81355875e-03, -2.20663417e-02, 1.09322118e-02,
              1.63183771e-02, 3.42491046e-02, 3.50330621e-02,
              1.77631807e-02, -6.69359975e-03, -7.93624949e-03,
              2.17554905e-02, 4.11989093e-02, -1.60218272e-02,
              6.14417121e-02, 2.74969377e-02, -2.89977118e-02,
              -5.77485305e-04, 1.25290286e-02, -3.36838304e-03,
              -7.16019943e-02, 3.74039449e-02, 1.82345044e-02,
              -4.12348360e-02, 3.42253633e-02, -5.36159202e-02,
              -3.60822678e-02, -1.83748454e-02, -3.80816907e-02,
              7.28133926e-03, -7.83245042e-02, -7.92451054e-02,
              7.21210614e-02, 1.89389009e-02, 3.71034518e-02,
              4.73285876e-02, -5.96028231e-02, -1.06078237e-02,
              -2.47211661e-02, -1.75019284e-03, -1.16187353e-02,
              2.29319017e-02, 4.57336791e-02, 9.28143691e-03,
              9.33773350e-03, 3.22774909e-02, -8.69705081e-02,
              -1.64810903e-02, -2.78827380e-02, -3.14949416e-02,
              -1.49380853e-02, -2.31218785e-02, -3.43466438e-02,
              1.12710791e-02, 1.71540920e-02, -5.38307382e-03,
              1.19593577e-03, -4.42360640e-02, -2.55687125e-02,
              4.13006879e-02, 2.10024659e-02, 3.30868475e-02,
              -2.33111717e-02, 6.43895566e-03, -2.85872221e-02,
              5.20928539e-02, -1.73622195e-03, 1.12925805e-02,
              2.46119336e-03, 1.94990113e-02, -6.53448794e-03,
              2.87583452e-02, -8.52482691e-02, 5.48473820e-02,
              -2.25019753e-02, -7.50565007e-02, 3.58133800e-02,
              2.62108719e-04, 6.71855360e-03, -2.99325325e-02,
              -2.82514151e-02, 2.40493305e-02, 4.99187186e-02,
              -2.16700621e-02, 3.83451171e-02, -8.42713788e-02,
              6.42555347e-03, 1.09448060e-02, -2.97963563e-02,
              -1.25807803e-02, -4.24578786e-02, 9.06305108e-03,
              -6.18216768e-02, -4.73963730e-02, 3.89293134e-02,
              4.51285653e-02, -5.73532358e-02, 4.82225530e-02,
              4.48965542e-02, 2.68238187e-02, 2.44180057e-02,
              2.54151188e-02, -5.76627534e-03, -2.44648289e-02,
              3.50612924e-02, -1.35726109e-02, 7.10050389e-02,
              -3.43175754e-02, -7.67040951e-03, -9.17334259e-02,
              3.55509818e-02, -1.52201662e-02, -1.86821073e-02,
              6.14645816e-02, -9.04140808e-03, -2.32551973e-02,
              8.32157396e-03, -9.05250479e-03, 9.07492731e-03,
              -5.62730320e-02, 7.72596756e-03, -9.68296602e-02,
              4.79538739e-02, -1.61648309e-03, 3.63967605e-02,
              -2.85648508e-03, 7.88790360e-03, -1.16378386e-02,
              9.55225341e-03, -3.98814678e-03, 5.93707040e-02,
              1.57538857e-02, 9.87393782e-03, -1.01059899e-01,
              7.63127767e-03, 2.60274503e-02, 2.02106722e-02,
              -5.46223996e-03, -2.90768314e-02, 4.96712625e-02,
              6.30857348e-02, 4.50786349e-04, 2.71802079e-02,
              -1.52121587e-02, 7.93779865e-02, -1.12200750e-03,
              -6.59367889e-02, -4.90725115e-02, -6.85358234e-03,
              5.16800657e-02, -9.86841973e-03, 1.17782773e-02,
              -9.60045829e-02, 2.71879900e-02, 1.59297488e-03,
              -1.76038351e-02, 4.71576564e-02, 3.59412096e-02,
              -5.30479439e-02, 2.09758859e-02, -3.80521454e-02,
              2.85601802e-02, -1.90537721e-02, 4.22683880e-02,
              2.00102124e-02, -2.83400808e-02, 1.52540277e-03,
              -6.69959113e-02, -2.86734030e-02, -6.68420037e-03,
              -7.50311911e-02, 4.72005643e-03, -3.45429704e-02,
              -4.62886121e-04, -5.26736714e-02, 5.49543388e-02,
              -3.87938470e-02, -7.75126927e-03, 2.54016947e-02,
              -4.34015505e-03, 3.05605680e-02, -5.07270917e-03,
              3.62393283e-03, 5.47420233e-02, -1.26313273e-04,
              2.47754040e-03, 1.30665274e-02, -2.95967162e-02,
              -4.71629994e-03, 2.08164137e-02, -7.79596204e-03,
              6.07454916e-03, 1.66969784e-02, 3.58711518e-02,
              1.49399843e-02, -1.83998812e-02, 5.47269993e-02,
              -3.74314897e-02, -2.31843740e-02, -1.28818871e-02,
              -7.15285540e-02, -4.70744520e-02, 1.83860287e-02,
              3.22536007e-02, -4.07805108e-02, 2.26784591e-02,
              4.22362909e-02, 1.86444231e-04, -4.87948582e-02,
              -4.35321741e-02, -7.99485669e-03, 3.50832520e-03,
              2.52029422e-04, 3.98564711e-02, -4.47862446e-02,
              3.28087918e-02, 2.37508211e-02, -2.60065980e-02,
              3.71748954e-02, 5.29616252e-02, 1.13189528e-02,
              -2.24010926e-02, -1.28271885e-03, 4.29592468e-02,
              2.68180631e-02, 1.73901822e-02, 5.43172210e-02,
              1.35355825e-02, -3.91236655e-02, 1.53188119e-02,
              -5.97416684e-02, -2.63233613e-02, -1.61851719e-02,
              8.79627652e-03, -1.67571083e-02, -6.47287145e-02,
              3.68832089e-02, -1.36806294e-02, 3.32759842e-02,
              1.57959200e-02, -1.96780954e-02, -6.02490967e-03,
              -1.58948582e-02, -1.34384539e-02, -1.77003406e-02,
              2.20466331e-02, -1.25331581e-02, 1.22764856e-02,
              -5.05211297e-03, 4.79424372e-02, -6.27269372e-02,
              -3.18896100e-02, -1.23048173e-02, 1.13159232e-03,
              -9.36958287e-03, 2.30313707e-02, -2.39874143e-03,
              -5.38537130e-02, -1.56427529e-02, -3.87173742e-02,
              -4.58558928e-03, -7.15564489e-02, -5.35098696e-03,
              4.37243432e-02, 4.37841713e-02, -3.55568752e-02,
              2.52225902e-02, -4.74736206e-02, -2.48769677e-04,
              -1.69400889e-02, -8.63008946e-03, 4.11478356e-02,
              8.58931802e-03, 1.24860017e-04, -4.18979768e-03,
              -7.32144248e-03, 3.08874585e-02, 3.23139280e-02,
              2.69013904e-02, 4.51113656e-02, -5.64347254e-03,
              -7.31476247e-02, -7.23212361e-02, -3.13672535e-02,
              2.94222031e-02, -2.95080729e-02, 5.31540178e-02,
              -2.26552058e-02, -1.46680530e-02, -2.33522933e-02,
              -2.61158757e-02, -1.59751624e-02, -6.12260355e-03,
              -2.99068280e-02, -1.01253819e-02, 5.65799773e-02,
              1.55801494e-02, -9.76853538e-03, 3.20441537e-02,
              -7.39495782e-03, 1.56227667e-02, 3.77561636e-02,
              -5.90708368e-02, -9.09191743e-03, -4.58559878e-02,
              5.29993996e-02, 5.37395626e-02, -1.22587532e-02,
              -5.24723828e-02, -1.13596311e-02, 2.74823140e-02,
              2.36147791e-02, -3.92370187e-02, 1.01046823e-02,
              1.79001819e-02, -3.70946452e-02, -1.71488430e-02,
              -3.12456973e-02, -1.79726183e-02, 5.20715900e-02,
              7.52280578e-02, -3.66633423e-02, -3.44410539e-02,
              4.63768467e-02, 5.01927286e-02, -5.97664230e-02,
              -2.49792654e-02, 3.71258669e-02, 9.88026056e-03,
              -3.64374951e-03, 8.04967713e-03, -1.27905598e-02,
              1.59236789e-03, 1.32136988e-02, -3.92748155e-02,
              6.98421150e-03, -4.26606135e-03, 4.41442318e-02,
              -4.39220741e-02, 2.47516972e-03, -6.06678240e-02,
              8.90192203e-03, -6.09061122e-02, 6.05002511e-03,
              -1.40853375e-02, -3.11983787e-02, -1.93421282e-02,
              3.80955525e-02, -1.47683313e-02, -4.81777489e-02,
              -3.89053896e-02, -2.47424236e-03, 5.57187339e-03,
              -7.82938749e-02, -4.64405343e-02, 4.55175266e-02,
              4.28984165e-02, 1.36786168e-02, 2.50886828e-02,
              -1.98131334e-03, 1.15832044e-02, 3.32416631e-02,
              -3.00699174e-02, -3.87401953e-02, 1.66212078e-02,
              -1.01425033e-03, 1.76178887e-02, -2.30543781e-02,
              5.10412082e-02, 1.68139138e-03, 3.28061767e-02,
              -9.70197562e-03, -1.47164660e-02, 5.07588312e-02,
              -4.45683300e-02, 1.41167911e-02, 7.48501122e-02,
              -2.28669471e-03, -2.29809768e-02, 3.25850658e-02,
              1.22649437e-02, -4.49586660e-02, -1.23455962e-02,
              1.34388264e-02, 2.80738361e-02, 1.73163153e-02,
              4.79589291e-02, 1.73718277e-02, -3.24406140e-02,
              -7.20741078e-02, 2.41176803e-02, -2.68644188e-02,
              3.63147468e-03, -1.69604328e-02, -6.10141549e-03,
              1.15496721e-02, 2.72606835e-02, -1.42320408e-03,
              2.10313872e-02, -3.11159412e-03, 1.75888129e-02,
              4.69241925e-02, 2.79321335e-02, -9.49071255e-03,
              -8.62548873e-03, 1.31939827e-02, -1.35884443e-02,
              -4.31307235e-05, 7.52040651e-03, -3.39714810e-02,
              4.38810699e-03, -2.90142670e-02, 1.11061800e-02,
              -3.39282826e-02, 8.71872082e-02, -1.33918030e-02,
              2.94200815e-02, -1.47213526e-02, 2.68452987e-02,
              3.78494971e-02, -1.61408763e-02, -8.55053682e-03,
              -2.46409029e-02, 2.35677417e-02, 2.94158142e-02,
              -6.38753846e-02, -1.36387218e-02, 3.08700856e-02,
              1.50884604e-02, 1.09616742e-02, -2.23893747e-02,
              -8.72588158e-02, 1.42631563e-03, 6.42264485e-02,
              -2.67157853e-02, -4.21791570e-03, -1.03313893e-01,
              -1.01346679e-01, -1.94876958e-02, -3.72002758e-02,
              -4.64463606e-02, 1.91609282e-02, 2.57606376e-02,
              -2.49569211e-02, 5.09973168e-02, -4.25925851e-03,
              8.56407825e-03, -2.00823974e-02, -1.97362644e-03,
              -1.40387211e-02, 2.16900483e-02, 3.32145765e-02,
              -3.89750488e-02, 5.49208513e-03, 1.54631743e-02,
              1.39654987e-02, 5.94044663e-02, -1.74135081e-02,
              -6.24101236e-03, 3.39858271e-02, -1.59896035e-02,
              6.56539872e-02, -1.55073768e-02, 1.26004219e-02,
              5.30480593e-02, 1.66684166e-02, -2.65195146e-02,
              -2.83525735e-02, -2.48214863e-02, 2.43366603e-02,
              -8.61613154e-02, 2.53458507e-02, 1.49776191e-02,
              4.16353866e-02, -1.40828900e-02, 2.77333986e-02,
              1.26076955e-02, 3.32824588e-02, -3.75509560e-02,
              6.09228760e-02, -1.58846229e-02, 1.83025636e-02,
              -6.34610355e-02, -2.62076668e-02, 1.18369097e-02,
              -2.27384828e-02, -4.23055142e-02, 9.78730898e-03,
              6.02663821e-03, -9.79444850e-03, 5.02627203e-03,
              -1.75426230e-02, -3.84047665e-02, -2.48221774e-02,
              -3.05508953e-02, -5.34480345e-03, 5.55603206e-03,
              -3.87982316e-02, -1.79277454e-02, 1.59406569e-02,
              -5.81073314e-02, -2.23582499e-02, -1.50005086e-04,
              -1.80699993e-02, -6.19800314e-02, 1.43732652e-02]]
        )
    )

    def test_initialize_huggingface_model(self):
        model_properties = {
            "name": "test-model",
            "type": "hf",
            "poolingMethod": "mean",
            "dimensions": 768
        }
        model = HuggingFaceModel(model_properties, "cpu", {})
        self.assertIsInstance(model, HuggingFaceModel)
        self.assertEqual("cpu", model.device)
        self.assertEqual({}, model.model_auth)
        self.assertEqual("test-model", model.model_properties.name)
        self.assertEqual("hf", model.model_properties.type)
        self.assertEqual(768, model.model_properties.dimensions)
        self.assertEqual(PoolingMethod.Mean, model.model_properties.pooling_method)

    def test_initialize_huggingface_model_with_invalid_properties(self):
        test_cases = [
            (

                {
                    "name": "test-model",
                    "type": "hf",
                    "pooling_method": "invalid_pooling_method"
                },
                "Invalid pooling method",
            ),
            (
                {},
                "Invalid model properties for the 'hf' model. Missing required fields."
            ),
            (
                {
                    "modelLocation": {
                        "hf": {
                            # missing "repoId"
                            "filename": "test-filename"
                        }
                    },
                    "type": "hf"
                },
                "Invalid modelLocation format"
            ),
            (
                {
                    "type": "hf",
                    "pooling_method": "cls"
                },
                "Name is not provided"
            ),
            (
                {
                    "name": "test-model",
                    "pooling_method": "cls"
                },
                "Type is not provided"
            ),
            (
                {
                    "url": "http://example.com",
                    "modelLocation": {
                        "hf": {
                            "repoId": "test-repo-id",
                            "filename": "test-filename"
                        }
                    },
                    "type": "hf"
                },
                "url and modelLocation are provided at the same time"
            ),
        ]
        for test_case, msg in test_cases:
            with self.subTest(test_case=test_case):
                with self.assertRaises(InvalidModelPropertiesError) as excinfo:
                    _ = HuggingFaceModel(test_case, "cpu", {})
                self.assertIn("Invalid model properties: ", str(excinfo.exception))

    def test_hf_e5_base_v2_embeddings_load_from_hf(self):
        """A test to ensure the embeddings are generated correctly for the default text model, loading from
        hf."""
        model_properties = {
            "name": 'intfloat/e5-base-v2',
            "dimensions": 768,
            "tokens": 512,
            "type": "hf",
            "model_size": 0.438,
            "text_query_prefix": "query: ",
            "text_chunk_prefix": "passage: ",
            "notes": ""
        }

        model = HuggingFaceModel(model_properties, "cpu", {})
        model.load()
        embeddings = model.encode(['query: how much protein should a female eat'])
        difference = np.linalg.norm(embeddings - self.E5_BASE_V2_MODEL_EMBEDDINGS) / len(
            embeddings)
        self.assertLess(difference, 1e-4, f"Text embeddings for model {model_properties} "
                                          f"are not close enough. The average difference is: {difference}")

    def test_hf_e5_base_v2_embeddings_load_from_zip_file(self):
        """A test to ensure the embeddings are generated correctly for the default text model, loading from
        a zip file on s3."""
        model_properties = {
            "url": "https://marqo-ecs-50-audio-test-dataset.s3.amazonaws.com/e5-li.zip",
            "dimensions": 768,
            "type": "hf",
        }
        model = HuggingFaceModel(model_properties, "cpu", {})
        model.load()
        embeddings = model.encode(['query: how much protein should a female eat'])
        difference = np.linalg.norm(embeddings - self.E5_BASE_V2_MODEL_EMBEDDINGS) / len(
            embeddings)
        self.assertLess(difference, 1e-4, f"Text embeddings for model {model_properties} "
                                          f"are not close enough. The average difference is: {difference}")

    @mock.patch("transformers.AutoModel.from_pretrained", return_value=mock.MagicMock())
    @mock.patch("transformers.AutoTokenizer.from_pretrained", side_effect=OSError("Tokenizer load failed"))
    def test_tokenizer_loading_failure(self, mock_auto_model, mock_auto_tokenizer):
        """Test that an error is raised when the _tokenizer fails to load."""
        model_properties = {
            "name": "test-model",
            "type": "hf",
            "poolingMethod": "mean",
            "dimensions": 768
        }

        with self.assertRaises(InvalidModelPropertiesError) as excinfo:
            model = HuggingFaceModel(model_properties, "cpu", {})
            model.load()

        self.assertIn("Tokenizer load failed", str(excinfo.exception))

    @mock.patch("transformers.AutoModel.from_pretrained", side_effect=OSError("Model load failed"))
    @mock.patch("transformers.AutoTokenizer.from_pretrained", return_value=mock.MagicMock())
    def test_model_loading_failure(self, mock_auto_model, mock_auto_tokenizer):
        """Test that an error is raised when the model fails to load."""
        model_properties = {
            "name": "test-model",
            "type": "hf",
            "poolingMethod": "mean",
            "dimensions": 768
        }

        with self.assertRaises(InvalidModelPropertiesError) as excinfo:
            model = HuggingFaceModel(model_properties, "cpu", {})
            model.load()

        self.assertIn("Model load failed", str(excinfo.exception))

    def test_trust_remote_code_validation_false(self):
        """
        Test that an error is raised when trust_remote_code is set to True for model or tokenizer,
        but is not set in the model_properties or is set to false
        """
        for trust_remote_code in [None, False]:
            for model_trust_remote_code, tokenizer_trust_remote_code in [(True, False), (False, True), (True, True)]:
                with self.subTest(trust_remote_code=trust_remote_code,
                                  model_trust_remote_code=model_trust_remote_code,
                                  tokenizer_trust_remote_code=tokenizer_trust_remote_code):
                    model_properties = {k: v for k, v in {'name': 'my_model', 'type': 'hf', 'dimensions': 512,
                                                          'trustRemoteCode': trust_remote_code}.items() if
                                        v is not None}
                    device = 'cpu'

                    # Case 1: trust_remote_code flag not set in model_properties, should raise InvalidModelPropertiesError
                    model_flags = HuggingFaceModelFlags(trust_remote_code=model_trust_remote_code)
                    tokenizer_flags = HuggingFaceTokenizerFlags(trust_remote_code=tokenizer_trust_remote_code)

                    with self.assertRaises(InvalidModelPropertiesError) as context:
                        HuggingFaceModel(model_properties, device, model_flags=model_flags,
                                         tokenizer_flags=tokenizer_flags)

                    self.assertIn("trust_remote_code", str(context.exception))

        for trust_remote_code in [None, False]:
            with self.subTest(trust_remote_code=trust_remote_code):
                model_properties = {k: v for k, v in {'name': 'my_model', 'type': 'hf', 'dimensions': 512,
                                                      'trustRemoteCode': trust_remote_code}.items() if
                                    v is not None}
                device = 'cpu'

                # Case 1: trust_remote_code flag not set in model_properties, should raise InvalidModelPropertiesError
                model_flags = HuggingFaceModelFlags(trust_remote_code=False)
                tokenizer_flags = HuggingFaceTokenizerFlags(trust_remote_code=False)

                self.assertIsNotNone(HuggingFaceModel(model_properties, device, model_flags=model_flags,
                                                      tokenizer_flags=tokenizer_flags))

    def test_trust_remote_code_validation_true(self):
        """
        Test that no error is raised when trust_remote_code is set to True.
        """
        for model_trust_remote_code, tokenizer_trust_remote_code in [(True, False), (False, True), (True, True)]:
            with self.subTest(model_trust_remote_code=model_trust_remote_code,
                              tokenizer_trust_remote_code=tokenizer_trust_remote_code):
                model_properties = {'name': 'my_model', 'type': 'hf', 'dimensions': 512, 'trustRemoteCode': True}
                device = 'cpu'

                # Case 1: trust_remote_code flag not set in model_properties, should raise InvalidModelPropertiesError
                model_flags = HuggingFaceModelFlags(trust_remote_code=model_trust_remote_code)
                tokenizer_flags = HuggingFaceTokenizerFlags(trust_remote_code=tokenizer_trust_remote_code)

                self.assertIsNotNone(HuggingFaceModel(model_properties, device, model_flags=model_flags,
                                                      tokenizer_flags=tokenizer_flags))

    def test_sentence_transformers_nli_bert_base_cls_pooling_embeddings(self):
        """A test to ensure the embeddings are generated correctly for the default text model, loading from hf.

        This model uses CLS pooling method.
        """
        model_properties = {
            "name": "sentence-transformers/nli-bert-base-cls-pooling",
            "dimensions": 768,
            "type": "hf",
        }

        model = HuggingFaceModel(model_properties, "cpu", {})
        model.load()
        embeddings = model.encode(['This is an example sentence'])
        difference = np.linalg.norm(embeddings - self.NLI_BERT_BASE_CLS_MODEL_EMBEDDINGS) / len(
            embeddings)
        self.assertLess(difference, 1e-4, f"Text embeddings for model {model_properties} "
                                          f"are not close enough. The average difference is: {difference}")

        difference_for_different_models = np.linalg.norm(embeddings - self.E5_BASE_V2_MODEL_EMBEDDINGS) / len(
            embeddings)

        self.assertGreater(
            difference_for_different_models, 1,
            f"Text embeddings for two different models are too close. "
            f"There is a problem with the test data or bug in the code."
        )

    @mock.patch("transformers.AutoModel.from_pretrained", side_effect=mock.MagicMock())
    @mock.patch("transformers.AutoTokenizer.from_pretrained", return_value=mock.MagicMock())
    def test_instantiate_a_hugging_face_model_with_minimum_model_properties(self, mock_auto_model, mock_auto_tokenizer):
        """Test that a model can be instantiated with the minimum required model properties."""
        model_properties = {
            "name": "test-model",
            "type": "hf",
            "dimensions": 512,
        }

        model = HuggingFaceModel(model_properties, "cpu", None)
        self.assertIsInstance(model, HuggingFaceModel)
        self.assertEqual("cpu", model.device)
        self.assertEqual(None, model.model_auth)
        self.assertEqual("test-model", model.model_properties.name)
        self.assertEqual("hf", model.model_properties.type)
        self.assertEqual(512, model.model_properties.dimensions)
        self.assertEqual(128, model.model_properties.tokens)
        self.assertEqual(PoolingMethod.Mean, model.model_properties.pooling_method)

    @mock.patch("transformers.AutoModel.from_pretrained", side_effect=mock.MagicMock())
    @mock.patch("transformers.AutoTokenizer.from_pretrained", return_value=mock.MagicMock())
    def test_instantiate_a_hugging_face_model_with_custom_model_properties(self, mock_auto_model, mock_auto_tokenizer):
        """Test that a model can be instantiated with custom model properties."""
        model_properties = {
            "name": "test-model",
            "type": "hf",
            "dimensions": 123,
            "tokens": 456,
            "poolingMethod": "cls",
        }

        model = HuggingFaceModel(model_properties, "cpu", None)
        self.assertIsInstance(model, HuggingFaceModel)
        self.assertEqual("cpu", model.device)
        self.assertEqual(None, model.model_auth)
        self.assertEqual("test-model", model.model_properties.name)
        self.assertEqual("hf", model.model_properties.type)
        self.assertEqual(123, model.model_properties.dimensions)
        self.assertEqual(456, model.model_properties.tokens)
        self.assertEqual(PoolingMethod.CLS, model.model_properties.pooling_method)


